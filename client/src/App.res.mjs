// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cell from "./Cell.res.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var match = React.useState(function () {
        return [];
      });
  var setBoard = match[1];
  React.useEffect((function () {
          Core__Promise.$$catch(fetch("http://localhost:8080/initialize").then(function (prim) {
                      return prim.json();
                    }).then(function (json) {
                    var obj = Js_json.decodeObject(json);
                    if (obj !== undefined) {
                      var boardJson = Js_dict.get(obj, "board");
                      if (boardJson !== undefined) {
                        var rows = Js_json.decodeArray(boardJson);
                        if (rows !== undefined) {
                          var board = Belt_Array.map(rows, (function (row) {
                                  var cells = Js_json.decodeArray(row);
                                  if (cells !== undefined) {
                                    return Belt_Array.map(cells, (function (cell) {
                                                  var letter = Js_json.decodeString(cell);
                                                  if (letter !== undefined) {
                                                    return letter;
                                                  } else {
                                                    return "";
                                                  }
                                                }));
                                  } else {
                                    return [];
                                  }
                                }));
                          setBoard(function (param) {
                                return board;
                              });
                        } else {
                          console.error("Invalid board array");
                        }
                      } else {
                        console.error("Could not find 'board' field");
                      }
                    } else {
                      console.error("Invalid JSON object");
                    }
                    return Promise.resolve();
                  }), (function (err) {
                  console.error("Error", err);
                  return Promise.resolve();
                }));
        }), []);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h1", {
                      children: "Strands FP",
                      className: "mb-3"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("div", {
                            children: Belt_Array.mapWithIndex(match[0], (function (rowIndex, row) {
                                    return Belt_Array.mapWithIndex(row, (function (colIndex, letter) {
                                                  return JsxRuntime.jsx(Cell.make, {
                                                              letter: letter
                                                            }, "cell-" + rowIndex.toString() + "-" + String(colIndex));
                                                }));
                                  })),
                            className: "grid grid-cols-6 gap-1"
                          }),
                      className: "flex justify-center"
                    })
              ]
            });
}

var make = App;

export {
  make ,
}
/* Cell Not a pure module */
